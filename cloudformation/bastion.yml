# A EC2 host that is publicly accessible and can access internal VPC resources, such as the database.
# Login is strictly controlled and monitored.

Conditions:
  BastionEnabled: !Not [!Equals ["${self:custom.bastion.sshKeyPairName}", ""]]

Mappings:
  AWSAMIRegionMap:
    # https://aws.amazon.com/amazon-linux-2/release-notes/
    AMI:
      AMZNLINUXHVM: amzn2-ami-hvm-2.0.20200207.1-x86_64-gp2
    ap-east-1:
      AMZNLINUXHVM: ami-47e4a036
    eu-central-1:
      AMZNLINUXHVM: ami-0df0e7600ad0913a9
    us-west-2:
      AMZNLINUXHVM: ami-0e8c04af2729ff1bb
    ap-northeast-2:
      AMZNLINUXHVM: ami-0a93a08544874b3b7
    eu-west-1:
      AMZNLINUXHVM: ami-099a8245f5daa82bf
    ca-central-1:
      AMZNLINUXHVM: ami-00db12b46ef5ebc36
    sa-east-1:
      AMZNLINUXHVM: ami-080a223be3de0c3b8
    eu-west-3:
      AMZNLINUXHVM: ami-0fd9bce3a3384b635
    us-east-1:
      AMZNLINUXHVM: ami-0a887e401f7654935
    us-east-2:
      AMZNLINUXHVM: ami-0e38b48473ea57778
    us-west-1:
      AMZNLINUXHVM: ami-01c94064639c71719
    ap-south-1:
      AMZNLINUXHVM: ami-0d9462a653c34dab7
    ap-northeast-1:
      AMZNLINUXHVM: ami-0af1df87db7b650f4
    ap-northeast-3:
      AMZNLINUXHVM: 0cd55644a3014eba1
    me-south-1:
      AMZNLINUXHVM: 0e0e68bcf15b6f5cd
    ap-southeast-1:
      AMZNLINUXHVM: ami-0f02b24005e4aec36
    ap-southeast-2:
      AMZNLINUXHVM: ami-0f767afb799f45102
    eu-west-2:
      AMZNLINUXHVM: ami-0389b2a3c4948b1a0

  LinuxAMINameMap:
    Amazon-Linux-HVM:
      Code: AMZNLINUXHVM

Resources:
  EC2SNSTopic:
    Type: AWS::SNS::Topic
    Condition: BastionEnabled
    Properties:
      Subscription:
      - Endpoint: ${self:custom.bastion.alertEmails}
        Protocol: email

  BastionMainLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Condition: BastionEnabled
    Properties:
      LogGroupName: "${self:custom.stackName}-bastion"
      RetentionInDays: ${self:custom.bastion.logRetentionInDays}

  SSHMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Condition: BastionEnabled
    Properties:
      LogGroupName: !Ref BastionMainLogGroup
      FilterPattern: ON FROM USER PWD
      MetricTransformations:
        - MetricName: SSHCommandCount
          MetricValue: '1'
          MetricNamespace: "Bastion/#{AWS::StackName}"

  BastionHostRole:
    Type: 'AWS::IAM::Role'
    Condition: BastionEnabled
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 's3:GetObject'
                Resource:
                  - 'arn:aws:s3:::ops.jetbridge.com/public/*'
                Effect: Allow
          PolicyName: jetbridge-ops-get-public-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:GetLogEvents'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutRetentionPolicy'
                  - 'logs:PutMetricFilter'
                  - 'logs:CreateLogGroup'
                Resource:
                  - !Join [':', ['arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:', !Ref BastionMainLogGroup, '*']]
                Effect: Allow
          PolicyName: bastion-cloudwatch-logs-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'ec2:AssociateAddress'
                  - 'ec2:DescribeAddresses'
                Resource:
                  - '*'
                Effect: Allow
          PolicyName: bastion-eip-policy
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'

  BastionHostProfile:
    Condition: BastionEnabled
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref BastionHostRole
      Path: /

  EIP:
    Condition: BastionEnabled
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  BastionAutoScalingGroup:
    Condition: BastionEnabled
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: '1'
      LaunchConfigurationName: !Ref BastionLaunchConfiguration
      MaxSize: '1'
      MinSize: '1'
      Tags:
      - Key: Name
        Value: '#{AWS::StackName}-BastionHost'
        PropagateAtLaunch: true
      NotificationConfigurations:
      - TopicARN: !Ref EC2SNSTopic
        NotificationTypes:
        - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
        - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
        WaitOnResourceSignals: true

  BastionLaunchConfiguration:
    Condition: BastionEnabled
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      # unused
      # can be used to authenticate to fetch private bootstrap scripts from S3
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref BastionHostRole
          buckets:
            - "ops.jetbridge.com"
      'AWS::CloudFormation::Init':
        config:
          files:
            /tmp/bastion_bootstrap.sh:
              source: "${self:custom.bastion.bootstrap}"
              mode: '000550'
              owner: root
              group: root
              # authentication: S3AccessCreds
            /home/ec2-user/.psqlrc:
              content: |
                \set PROMPT1 '%[%033[1;31m%]%M%[%033[0m%]:%> %[%033[1;33m%]%n%[%033[0m%]@%/%R%#%x '
                \pset pager off
                \set COMP_KEYWORD_CASE upper
                \set VERBOSITY verbose
                \set HISTCONTROL ignorespace
                \set HISTFILE ~/.psql_history- :DBNAME
                \set HISTSIZE 5000
                \set version 'SELECT version();'
                \set extensions 'select * from pg_available_extensions;'
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            b-bootstrap:
              command: !Join
                - ''
                - - ./tmp/bastion_bootstrap.sh
                  - ' --banner ${self:custom.bastion.banner}'
                  - ' --enable ${self:custom.bastion.bannerEnabled}'
                  - ' --tcp-forwarding ${self:custom.bastion.tcpForwardingEnabled}'
                  - ' --x11-forwarding ${self:custom.bastion.x11ForwardingEnabled}'
    Properties:
      AssociatePublicIpAddress: true
      PlacementTenancy: ${self:custom.bastion.tenancy}
      KeyName: ${self:custom.bastion.sshKeyPairName}
      IamInstanceProfile: !Ref BastionHostProfile
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - !FindInMap
          - LinuxAMINameMap
          - 'Amazon-Linux-HVM'
          - Code
      SecurityGroups:
        - !Ref BastionSecurityGroup
      InstanceType: ${self:custom.bastion.instanceType}
      # cloud-init script
      # install postgresql
      # signal cloudformation that we've initialized correctly
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              set -x
            - |
              yum install -y postgresql &> /dev/null
            - EIP_LIST="
            - !Ref EIP
            - |
              "
            - CLOUDWATCHGROUP=
            - !Ref BastionMainLogGroup
            - |+

            - '/opt/aws/bin/cfn-init -v --stack '
            - !Ref 'AWS::StackName'
            - ' --resource BastionLaunchConfiguration --region '
            - !Ref 'AWS::Region'
            - |+

            - '/opt/aws/bin/cfn-signal -e $? --stack '
            - !Ref 'AWS::StackName'
            - ' --resource BastionAutoScalingGroup --region '
            - !Ref 'AWS::Region'
            - |+

  CPUTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: BastionEnabled
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - Ref: EC2SNSTopic
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref BastionAutoScalingGroup

Outputs:
  EIP:
    Condition: BastionEnabled
    Description: The public IP address of the SSH bastion host/instance
    Value: !Ref EIP
    Export:
      Name: '#{AWS::StackName}-EIP'

  SSHCommand:
    Description: SSH command line
    Condition: BastionEnabled
    Value: !Join
             - ''
             - - 'ssh -i "'
               - '~/.ssh/'
               - ${self:custom.bastion.sshKeyPairName}
               - '.pem" '
               - 'ec2-user@'
               - !Ref EIP

  PSQLCommand:
    Description: psql command line
    Condition: BastionEnabled
    Value: !Join
             - ''
             - - 'psql -h '
               - !GetAtt DBCluster.Endpoint.Address
               - ' -p '
               - !GetAtt DBCluster.Endpoint.Port
               - ' -U dbadmin '
               - ${self:custom.db.dbname}
